@page "/profile/{ArtistId:int}"
@inject IArtistService ArtistService
@inject IProductServices ProductService
@inject ICartService CartService
@inject UserSession UserSession
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@using System.Security.Claims

@if (artist == null)
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <p class="loading-text">Loading artist profile...</p>
    </div>
}
else
{
    <div class="artist-profile-container d-flex flex-nowrap gap-4 align-start">
        <!-- Left: Profile + Work -->
        <div class="left-column">
            <div class="profile-image-container mb-3">
                <img src="@artist.ImageUrl" alt="@artist.Name" class="profile-img mb-2" />
                @if (showEditButton)
                {
                    <button @onclick="() => isEditMode = true" class="edit-profile-btn btn btn-sm btn-outline-primary">
                        <i class="fas fa-pencil-alt"></i> Edit Profile
                    </button>
                }
            </div>

            <div class="featured-work-wrapper">
                <h5 class="section-title mt-3">Featured Work</h5>
                <img src="@artist.workImage" alt="Work Sample" class="work-img" />
            </div>
        </div>

        <!-- Vertical Separator (now properly between) -->
        <div class="vertical-separator"></div>

        <!-- Right: Info + Products -->
        <div class="right-column flex-grow-1">
            <h1 class="artist-name">@artist.Name</h1>
            <div class="artist-meta mb-2">
                <span class="location text-muted">
                    <i class="fas fa-map-marker-alt"></i> @artist.Location
                </span>
            </div>
            <div class="artist-bio mb-4">
                <h3 class="section-title">About the Artist</h3>
                <p>@artist.About</p>
            </div>
         
            <div> 
                <br />
            </div>


            <div class="products-section">
                <div class="section-header">
                    <h2 class="section-title">Products by @artist.Name</h2>
                    @if (artistProducts.Any())
                    {
                        <span class="product-count">(@artistProducts.Count() items)</span>
                    }
                </div>

                @if (artistProducts.Any())
                {
                    <div class="product-grid">
                        @foreach (var product in artistProducts)
                        {
                            <div class="product-card">
                                <div class="product-image-container">
                                    <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
                                </div>
                                <div class="product-details">
                                    <h3 class="product-name">@product.Name</h3>
                                    <p class="product-price">$@product.Price.ToString("N2")</p>
                                    <p class="product-description">@product.Description</p>
                                    <div class="product-actions">
                                        <button class="add-to-cart-btn" @onclick="() => AddToCart(product)">
                                            <i class="fas fa-shopping-cart"></i> Add to Cart
                                        </button>
                                        <button class="wishlist-btn">
                                            <i class="far fa-heart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-palette empty-icon"></i>
                        <h3>No Products Available</h3>
                        <p>This artist has no products available at the moment.</p>
                    </div>
                }
            </div>
        </div>
    </div>

}

@if (showConfirmation)
{
    <div class="confirmation-toast">
        <div class="toast-content">
            <i class="fas fa-check-circle toast-icon"></i>
            <span>@confirmationMessage</span>
        </div>
    </div>
}

@if (isEditMode && artist != null)
{
    <div class="modal-backdrop-blur show d-block"></div>

    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg border-0 rounded-4">
                <div class="modal-header bg-primary text-white rounded-top-4">
                    <h5 class="modal-title fw-bold">Edit Profile</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => isEditMode = false" aria-label="Close"></button>
                </div>

                <div class="modal-body p-4">
                    <!-- Profile Image Upload -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Profile Image</label>
                        @if (!string.IsNullOrEmpty(updatedImageUrl))
                        {
                            <div class="mb-2">
                                <img src="@updatedImageUrl" width="100" class="rounded-circle shadow-sm border border-2" />
                            </div>
                        }
                        <InputFile OnChange="@(e => OnEditFileChange(e, "profile"))" class="form-control form-control-sm shadow-sm" />
                    </div>

                    <!-- Work Sample Image Upload -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Work Sample Image</label>
                        @if (!string.IsNullOrEmpty(updatedWorkImage))
                        {
                            <div class="mb-2">
                                <img src="@updatedWorkImage" width="100" class="rounded shadow-sm border" />
                            </div>
                        }
                        <InputFile OnChange="@(e => OnEditFileChange(e, "work"))" class="form-control form-control-sm shadow-sm" />
                    </div>

                    <!-- About Textarea -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold">About</label>
                        <textarea class="form-control shadow-sm rounded-3 p-3" rows="4" @bind="updatedAbout" placeholder="Write something about yourself..."></textarea>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-success px-4 py-2 shadow-sm rounded-pill fw-semibold" @onclick="SaveChangesAsync">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                    <button class="btn btn-outline-secondary px-4 py-2 rounded-pill shadow-sm" @onclick="() => isEditMode = false">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Parameter]
    public int ArtistId { get; set; }
    private bool showEditButton = false;

    private ArtistDropdownModel? artist;
    private List<ProductsModel> artistProducts = new();
    private bool showConfirmation = false;
    private string confirmationMessage = "";
    private System.Timers.Timer? confirmationTimer;

    private bool isEditMode = false;
    private string? currentUserEmail;
    private bool isProfileOwner = false;

    // Editable fields
    private string updatedImageUrl = "";
    private string updatedWorkImage = "";
    private string updatedAbout = "";

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // STEP 1: Get current user from AuthenticationStateProvider
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email))
        {
            await UserSession.LoadUserAsync(email);
        }

        // STEP 2: Proceed with logic
        artist = await ArtistService.GetArtistByIdAsync(ArtistId);

        if (UserSession.UserId == null)
        {
            Console.WriteLine("UserSession.UserId is still null!");
            return; // exit early if needed
        }

        if (artist != null)
        {
            artistProducts = ProductService.GetData()
                                         .Where(p => p.ArtistId == ArtistId && p.StockQuantity > 0)
                                         .ToList();

            var loggedInUserId = UserSession.UserId;

            if (loggedInUserId.HasValue)
            {
                var approvedArtistIds = await ArtistService.GetArtistApplicationsByUserIdAsync(loggedInUserId.Value);

                var listString = string.Join(", ", approvedArtistIds);
                _debugLog = $"Approved Artist IDs: {listString}";

                if (approvedArtistIds.Contains(ArtistId))
                {
                    showEditButton = true;

                    updatedImageUrl = artist.ImageUrl ?? "";
                    updatedWorkImage = artist.workImage ?? "";
                    updatedAbout = artist.About ?? "";
                }
            }
            else
            {
                showEditButton = false;
            }
        }
    }
    private string? _debugLog;
    private bool _firstRenderDone = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _debugLog != null)
        {
            _firstRenderDone = true;
            await JSRuntime.InvokeVoidAsync("console.log", _debugLog);
        }
    }

    private async Task SaveChangesAsync()
    {
        if (artist != null)
        {
            // Create a new model with updated values
            var updatedArtist = new ArtistDropdownModel
            {
                Id = artist.Id, // This is the UserId that matches database UserId column
                ImageUrl = updatedImageUrl,
                workImage = updatedWorkImage,
                About = updatedAbout,
                // Preserve other existing properties
                Name = artist.Name,
                Location = artist.Location
                // Add any other properties that exist in your model
            };

            try
            {
                await ArtistService.UpdateArtistProfileAsync(updatedArtist);

                // Refresh the artist data
                artist = await ArtistService.GetArtistByIdAsync(ArtistId);
                isEditMode = false;

                // Show success message
                confirmationMessage = "Profile updated successfully!";
                showConfirmation = true;
                StartConfirmationTimer();
            }
            catch (Exception ex)
            {
                confirmationMessage = $"Error updating profile: {ex.Message}";
                showConfirmation = true;
                StartConfirmationTimer();
            }
        }
        StateHasChanged();

    }

    private void StartConfirmationTimer()
    {
        confirmationTimer?.Dispose();
        confirmationTimer = new System.Timers.Timer(3000);
        confirmationTimer.Elapsed += (sender, args) =>
        {
            showConfirmation = false;
            InvokeAsync(StateHasChanged);
            confirmationTimer?.Dispose();
        };
        confirmationTimer.Start();
    }

    private void AddToCart(ProductsModel product, int quantity = 1)
    {
        CartService.AddToCart(product, quantity);
        confirmationMessage = $"{quantity} x {product.Name} added to cart!";
        showConfirmation = true;
        StartConfirmationTimer();
    }

    [Inject] public IWebHostEnvironment Env { get; set; } = default!;
    private bool isUploading = false;

    private async Task OnEditFileChange(InputFileChangeEventArgs e, string imageType)
    {
        isUploading = true;

        var file = e.File;
        var uploadsFolder = Path.Combine(Env.WebRootPath, "artist");

        if (!Directory.Exists(uploadsFolder))
            Directory.CreateDirectory(uploadsFolder);

        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine(uploadsFolder, fileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream); // Max 5 MB
        }

        var relativeUrl = $"/artist/{fileName}";

        if (imageType == "profile")
            updatedImageUrl = relativeUrl;
        else if (imageType == "work")
            updatedWorkImage = relativeUrl;

        isUploading = false;
    }

}


<style>
    /* Base Styles */
    :root {
        --primary-color: #FF6B00; /* Vibrant orange */
        --secondary-color: #CC5500; /* Deep burnt orange */
        --accent-color: #FFD580; /* Light orange/yellow for highlights */
        --text-color: #333;
        --light-text: #777;
        --border-color: #e0e0e0;
        --bg-light: #f9f9f9;
        --white: #ffffff;
        --shadow-sm: 0 2px 8px rgba(0,0,0,0.1);
        --shadow-md: 0 4px 12px rgba(0,0,0,0.15);
        --transition: all 0.3s ease;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    /* Loading State */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 300px;
    }


    input[type="file"], textarea, .form-control {
        transition: border-color 0.3s, box-shadow 0.3s;
    }

        input[type="file"]:focus, textarea:focus, .form-control:focus {
            border-color: var(--primary-color, #6C63FF);
            box-shadow: 0 0 0 0.2rem rgba(108, 99, 255, 0.25);
        }


    .loading-spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid var(--primary-color);
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 16px;
    }

    .loading-text {
        color: var(--light-text);
        font-size: 18px;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .artist-profile-container {
        display: flex;
        gap: 2rem;
        align-items: flex-start;
        flex-wrap: nowrap;
    }


    /* Artist Header */
    .artist-header {
        display: flex;
        flex-wrap: wrap;
        gap: 40px;
        margin-bottom: 40px;
    }

    .profile-image-container {
        position: relative;
        flex: 0 0 300px;
    }

    .left-column {
        flex: 0 0 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .vertical-separator {
        width: 2px;
        background-color: #ccc;
        height: auto;
        min-height: 100%;
        opacity: 0.6;
    }

    .right-column {
        flex: 1;
        min-width: 700px;
    }
    .profile-img {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: var(--shadow-md);
    }

    .artist-info {
        flex: 1;
        min-width: 300px;
    }

    .artist-name {
        font-size: 2.5rem;
        color: var(--text-color);
        margin-bottom: 8px;
        font-weight: 700;
    }

    .artist-meta {
        display: flex;
        gap: 20px;
        margin-bottom: 24px;
    }

    .location {
        display: flex;
        align-items: center;
        gap: 6px;
        color: var(--light-text);
    }

    .artist-bio {
        background: var(--bg-light);
        padding: 23px;
        border-radius: 8px;
        width: 100%; /* makes it stretch within right-column */
    }

    .section-title {
        font-size: 1.5rem;
        color: var(--text-color);
        margin-bottom: 16px;
        font-weight: 600;
    }

    /* Featured Work Section */
    .work-sample-section {
        margin-top: 2rem;
        text-align: center;
    }

    .featured-work-wrapper img.work-img {
        max-width: 100%;
        max-height: 180px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: var(--shadow-sm);
    }

    .work-img {
        width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: var(--shadow-sm);
        object-fit: cover;
        max-height: 300px; /* Limit height */
    }


    /* Products Section */
    .products-section {
        margin-top: 1px;
    }

    .section-header {
        display: flex;
        align-items: baseline;
        gap: 12px;
        margin-bottom: 24px;
    }

    .product-count {
        color: var(--light-text);
        font-size: 1rem;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 24px;
    }

    .product-card {
        background: var(--white);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        transition: var(--transition);
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
        }

    .product-image-container {
        position: relative;
        height: 250px;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: var(--transition);
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    .quick-view-btn {
        position: absolute;
        bottom: -40px;
        left: 0;
        right: 0;
        background: rgba(0,0,0,0.7);
        color: white;
        border: none;
        padding: 10px;
        width: 100%;
        cursor: pointer;
        transition: var(--transition);
        opacity: 0;
    }

    .product-card:hover .quick-view-btn {
        bottom: 0;
        opacity: 1;
    }

    .product-details {
        padding: 16px;
    }

    .product-name {
        font-size: 1.1rem;
        margin-bottom: 8px;
        color: var(--text-color);
    }

    .product-price {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 8px;
    }

    .product-description {
        color: var(--light-text);
        font-size: 0.9rem;
        margin-bottom: 16px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-actions {
        display: flex;
        gap: 8px;
    }

    /* Buttons */
    .edit-profile-btn {
        position: absolute;
        bottom: 20px;
        right: 20px;
        background: var(--white);
        color: var(--primary-color);
        border: 1px solid var(--primary-color);
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        transition: var(--transition);
        font-weight: 500;
    }

        .edit-profile-btn:hover {
            background: var(--primary-color);
            color: var(--white);
        }

    .add-to-cart-btn {
        flex: 1;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: var(--transition);
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

        .add-to-cart-btn:hover {
            background: var(--secondary-color);
        }

    .wishlist-btn {
        width: 40px;
        background: var(--bg-light);
        color: var(--light-text);
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: var(--transition);
    }

        .wishlist-btn:hover {
            color: var(--accent-color);
        }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background: var(--bg-light);
        border-radius: 8px;
    }

    .empty-icon {
        font-size: 3rem;
        color: var(--light-text);
        margin-bottom: 16px;
    }

    .empty-state h3 {
        color: var(--text-color);
        margin-bottom: 8px;
    }

    .empty-state p {
        color: var(--light-text);
    }

    /* Confirmation Toast */
    .confirmation-toast {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: var(--primary-color);
        color: white;
        padding: 16px 24px;
        border-radius: 8px;
        box-shadow: var(--shadow-md);
        animation: slideIn 0.3s ease-out;
        z-index: 1000;
    }

    .toast-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .toast-icon {
        font-size: 1.5rem;
    }

    @@keyframes slideIn {
        from

    {
        transform: translateY(100px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .artist-header

    {
        flex-direction: column;
        gap: 24px;
    }

    .profile-image-container {
        flex: 0 0 auto;
    }

    .artist-name {
        font-size: 2rem;
    }

    }

    /* Modal overlay */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    /* Modal container */
    .modal-container {
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        max-width: 600px;
        width: 100%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    /* Close button (X) */
    .modal-close-btn {
        position: absolute;
        top: 0.8rem;
        right: 1rem;
        font-size: 1.5rem;
        color: #888;
        background: none;
        border: none;
        cursor: pointer;
    }

        .modal-close-btn:hover {
            color: #000;
        }

    /* Form fields */
    .modal-container label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .modal-container textarea,
    .modal-container input[type="file"] {
        width: 100%;
        margin-bottom: 1rem;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

        .modal-actions button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

    .save-btn {
        background-color: #28a745;
        color: white;
    }

        .save-btn:hover {
            background-color: #218838;
        }

    .cancel-btn {
        background-color: #6c757d;
        color: white;
    }

        .cancel-btn:hover {
            background-color: #5a6268;
        }

    .modal-backdrop-blur {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        backdrop-filter: blur(5px); /* Blurred background */
        background-color: rgba(0, 0, 0, 0.2);
        z-index: 1040;
    }

</style>